!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
CC	Makefile	/^CC = cc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g$/;"	m
CLOCKID	repmon.c	24;"	d	file:
CMDNAMELEN	rconf.h	14;"	d
CONFIG_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	6;"	d
DBG_PRINT_PER_SYSTEM	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	95;"	d	file:
DBG_RANDOM_LOSE_FEW	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	93;"	d	file:
DBG_RANDOM_LOSE_MANY	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	94;"	d	file:
DBG_REPORT_ALL_RTTS	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	96;"	d	file:
DBG_SENT_TIMES	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	92;"	d	file:
DBG_TRACE	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	91;"	d	file:
DEFAULT_BACKOFF_FACTOR	materials/ReplicationMonitor/rsync-monitor/src/rephb/options.h	44;"	d
DEFAULT_INTERVAL	materials/ReplicationMonitor/rsync-monitor/src/rephb/options.h	23;"	d
DEFAULT_PERHOST_INTERVAL	materials/ReplicationMonitor/rsync-monitor/src/rephb/options.h	27;"	d
DEFAULT_PING_DATA_SIZE	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	76;"	d	file:
DEFAULT_RETRY	materials/ReplicationMonitor/rsync-monitor/src/rephb/options.h	36;"	d
DEFAULT_SELECT_TIME	materials/ReplicationMonitor/rsync-monitor/src/rephb/options.h	40;"	d
DEFAULT_TIMEOUT	materials/ReplicationMonitor/rsync-monitor/src/rephb/options.h	31;"	d
DNS_TIMEOUT	materials/ReplicationMonitor/rsync-monitor/src/rephb/options.h	50;"	d
ERRNO_FMT	utils.c	/^static const char ERRNO_FMT[] = ": %s\\n";$/;"	v	file:
EV_TYPE_PING	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	147;"	d	file:
EV_TYPE_TIMEOUT	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	148;"	d	file:
E_ERROR	utils.h	12;"	d
E_SUCCESS	utils.h	11;"	d
E_USAGE	utils.h	13;"	d
FPING_ICMPHDR	materials/ReplicationMonitor/rsync-monitor/src/rephb/fping.h	12;"	d
FPING_ICMPHDR	materials/ReplicationMonitor/rsync-monitor/src/rephb/fping.h	16;"	d
FPING_INADDR	materials/ReplicationMonitor/rsync-monitor/src/rephb/fping.h	11;"	d
FPING_INADDR	materials/ReplicationMonitor/rsync-monitor/src/rephb/fping.h	15;"	d
FPING_SOCKADDR	materials/ReplicationMonitor/rsync-monitor/src/rephb/fping.h	10;"	d
FPING_SOCKADDR	materials/ReplicationMonitor/rsync-monitor/src/rephb/fping.h	14;"	d
F_DAY	rservice.c	/^    F_DAY,$/;"	e	enum:f	file:
F_DEVICE	rsynclog.h	/^    F_DEVICE,$/;"	e	enum:file_type
F_DIRECTORY	rsynclog.h	/^    F_DIRECTORY,$/;"	e	enum:file_type
F_FILE	rsynclog.h	/^    F_FILE = 0,$/;"	e	enum:file_type
F_HOUR	rservice.c	/^    F_HOUR,$/;"	e	enum:f	file:
F_MINUTE	rservice.c	/^    F_MINUTE = 0,$/;"	e	enum:f	file:
F_MONTH	rservice.c	/^    F_MONTH,$/;"	e	enum:f	file:
F_SPECIAL_FILE	rsynclog.h	/^    F_SPECIAL_FILE$/;"	e	enum:file_type
F_SYMLINK	rsynclog.h	/^    F_SYMLINK,$/;"	e	enum:file_type
F_WEEK	rservice.c	/^    F_WEEK,$/;"	e	enum:f	file:
HAVE_INTTYPES_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	10;"	d
HAVE_MEMORY_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	19;"	d
HAVE_STDINT_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	22;"	d
HAVE_STDLIB_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	25;"	d
HAVE_STRINGS_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	28;"	d
HAVE_STRING_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	31;"	d
HAVE_SYS_FILE_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	34;"	d
HAVE_SYS_SELECT_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	37;"	d
HAVE_SYS_STAT_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	40;"	d
HAVE_SYS_TYPES_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	43;"	d
HAVE_UNISTD_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	46;"	d
HOST_ENTRY	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^} HOST_ENTRY;$/;"	t	file:
ICMP_UNREACH_MAXTYPE	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	143;"	d	file:
INADDR_NONE	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	79;"	d
INTERVAL	netstat.h	17;"	d
LOCK_FILE	repmon.c	22;"	d	file:
LOG_BUF	rlog.h	16;"	d
LOG_CONTENT_LEN	rlog.h	14;"	d
LOG_FILE_SIZE	rlog.h	15;"	d
LOG_ITEM_CRITICAL	rlog.h	/^	LOG_ITEM_CRITICAL$/;"	e	enum:log_item_level
LOG_ITEM_LEN	rlog.h	17;"	d
LOG_ITEM_OK	rlog.h	/^	LOG_ITEM_OK,$/;"	e	enum:log_item_level
LOG_ITEM_WARN	rlog.h	/^	LOG_ITEM_WARN,$/;"	e	enum:log_item_level
LOG_SERNAME_LEN	rlog.h	13;"	d
LOG_TYPE_FILE	rlog.h	/^	LOG_TYPE_FILE$/;"	e	enum:log_type
LOG_TYPE_STDOUT	rlog.h	/^	LOG_TYPE_STDOUT,$/;"	e	enum:log_type
LOG_TYPE_SYSLOG	rlog.h	/^	LOG_TYPE_SYSLOG,$/;"	e	enum:log_type
LOOP_MAX	netstat.h	18;"	d
MAX_BACKOFF_FACTOR	materials/ReplicationMonitor/rsync-monitor/src/rephb/options.h	47;"	d
MAX_COUNT	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	79;"	d	file:
MAX_IP_PACKET	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	66;"	d	file:
MAX_PING_DATA	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	73;"	d	file:
MAX_RETRY	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	83;"	d	file:
MIN_BACKOFF_FACTOR	materials/ReplicationMonitor/rsync-monitor/src/rephb/options.h	46;"	d
MIN_INTERVAL	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	80;"	d	file:
MIN_PERHOST_INTERVAL	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	81;"	d	file:
MIN_PING_DATA	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	65;"	d	file:
MIN_TIMEOUT	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	82;"	d	file:
NIC_COUNT_MAX	netstat.h	20;"	d
NIC_NAME_MAX	netstat.h	19;"	d
OBJS	Makefile	/^OBJS = repmon.o utils.o rconf.o rlog.o rsynclog.o rservice.o netstat.o$/;"	m
PACKAGE	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	49;"	d
PACKAGE_BUGREPORT	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	52;"	d
PACKAGE_NAME	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	55;"	d
PACKAGE_STRING	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	58;"	d
PACKAGE_TARNAME	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	61;"	d
PACKAGE_URL	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	64;"	d
PACKAGE_VERSION	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	67;"	d
PATH_CONFIG	repmon.c	21;"	d	file:
PATH_CONFIG	test.c	/^static const char PATH_CONFIG[] = "repmon.conf";$/;"	v	file:
PNAME_FMT	utils.c	/^static const char PNAME_FMT[] = "%s: ";$/;"	v	file:
RC_GROUP	rconf.c	18;"	d	file:
RC_OWNER	rconf.c	17;"	d	file:
RC_PERM	rconf.c	19;"	d	file:
REPMON_LOG	repmon.c	23;"	d	file:
RESP_UNUSED	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	87;"	d	file:
RESP_WAITING	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	86;"	d	file:
SEQMAP_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.h	2;"	d
SEQMAP_MAXSEQ	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.h	14;"	d
SEQMAP_TIMEOUT_IN_S	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.c	58;"	d	file:
SEQMAP_UNASSIGNED_HOST_NR	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.c	59;"	d	file:
SEQMAP_VALUE	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.h	/^} SEQMAP_VALUE;$/;"	t
SH_PING	utils.h	17;"	d
SH_RM	utils.h	16;"	d
SH_TMPFILE	utils.h	18;"	d
SH_WHICH	utils.h	15;"	d
SIZE_ICMP_HDR	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	69;"	d	file:
SIZE_ICMP_HDR	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	71;"	d	file:
SIZE_IP_HDR	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	67;"	d	file:
STATUS_OFFLINE	rservice.c	/^    STATUS_OFFLINE,$/;"	e	enum:status_s	file:
STATUS_ONLINE	rservice.c	/^    STATUS_ONLINE = 0,$/;"	e	enum:status_s	file:
STAT_IDLE	rservice.c	/^    STAT_IDLE = 0,$/;"	e	enum:stat_s	file:
STAT_RUNNING	rservice.c	/^    STAT_RUNNING,$/;"	e	enum:stat_s	file:
STDC_HEADERS	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	70;"	d
TEST_LI_CONTENT	rlog.c	16;"	d	file:
TEST_LI_SERNAME	rlog.c	15;"	d	file:
TEXT_DOMAIN	repmon.c	168;"	d	file:
T_TYPE_OTHER	rsynclog.h	/^    T_TYPE_OTHER$/;"	e	enum:transfer_type
T_TYPE_RECEIVED	rsynclog.h	/^    T_TYPE_RECEIVED,$/;"	e	enum:transfer_type
T_TYPE_SENT	rsynclog.h	/^    T_TYPE_SENT = 0,$/;"	e	enum:transfer_type
VERSION	materials/ReplicationMonitor/rsync-monitor/src/rephb/config.h	73;"	d
_FPING_H	materials/ReplicationMonitor/rsync-monitor/src/rephb/fping.h	2;"	d
_REPMONITOR_H	repmon.h	2;"	d
_REPMON_LOG_H	rlog.h	2;"	d
_REPMON_RCONF_H	rconf.h	2;"	d
_REPMON_UTILS_H	utils.h	2;"	d
__APPLE_USE_RFC_3542	materials/ReplicationMonitor/rsync-monitor/src/rephb/fping.h	4;"	d
__NETSTAT_H	netstat.h	6;"	d
__RSYNCLOG_H	rsynclog.h	2;"	d
add_addr	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void add_addr( char *name, char *host, struct in_addr ipaddr )$/;"	f
add_cidr	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void add_cidr(char *addr)$/;"	f
add_name	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void add_name( char *name )$/;"	f
add_range	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void add_range(char *start, char *end)$/;"	f
addr_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int per_recv_flag, report_all_rtts_flag, name_flag, addr_flag, backoff_flag;$/;"	v
alive_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int verbose_flag, quiet_flag, stats_flag, unreachable_flag, alive_flag;$/;"	v
backoff	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^float backoff = DEFAULT_BACKOFF_FACTOR;$/;"	v
backoff_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int per_recv_flag, report_all_rtts_flag, name_flag, addr_flag, backoff_flag;$/;"	v
check_running_time	rservice.c	/^check_running_time(rservice_t *rs)$/;"	f
check_service_cron_job	rservice.c	/^check_service_cron_job(rservice_t *rs)$/;"	f
count	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^unsigned int count = 1;$/;"	v
count_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int elapsed_flag, version_flag, count_flag, loop_flag;$/;"	v
crash_and_burn	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void crash_and_burn( char *message )$/;"	f
current_time	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^struct timeval current_time;        \/* current time (pseudo) *\/$/;"	v
daemonize	repmon.c	/^daemonize(repmonconf_t *rcp, log_entity_t *lep)$/;"	f
day	rservice.c	/^    int day;$/;"	m	struct:frequency	file:
debugging	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^unsigned int debugging = 0;$/;"	v
die	netstat.c	/^die(char *message, int status)$/;"	f	file:
die	utils.c	/^die(const char *format, ...)$/;"	f
elapsed_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int elapsed_flag, version_flag, count_flag, loop_flag;$/;"	v
enabled	rservice.c	/^    int enabled;$/;"	m	struct:rservice_s	file:
end_time	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^struct timeval end_time;$/;"	v
errno_crash_and_burn	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void errno_crash_and_burn( char *message )$/;"	f
ev_dequeue	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^HOST_ENTRY *ev_dequeue()$/;"	f
ev_enqueue	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void ev_enqueue(HOST_ENTRY  *h)$/;"	f
ev_first	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^HOST_ENTRY *ev_first;$/;"	v
ev_last	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^HOST_ENTRY *ev_last;$/;"	v
ev_next	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     struct host_entry    *ev_next;           \/* double linked list for the event-queue *\/$/;"	m	struct:host_entry	file:
ev_prev	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     struct host_entry    *ev_prev;           \/* double linked list for the event-queue *\/$/;"	m	struct:host_entry	file:
ev_remove	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void ev_remove(HOST_ENTRY *h)$/;"	f
ev_time	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     struct timeval       ev_time;            \/* time, after which this event should happen *\/$/;"	m	struct:host_entry	file:
ev_type	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  ev_type;            \/* event type *\/$/;"	m	struct:host_entry	file:
exec_shell1	utils.c	/^exec_shell1(const char *cmd, const char *arg)$/;"	f
f	rservice.c	/^    f_t f;$/;"	m	struct:frequency	file:
f	rservice.c	/^typedef enum f$/;"	g	file:
f_t	rservice.c	/^} f_t;$/;"	t	file:
f_type	rsynclog.h	/^    file_type_t f_type;$/;"	m	struct:transfer_file
fetch32	netstat.c	/^fetch32(kstat_t *ksp, char *value, uint32_t def)$/;"	f	file:
fetch64	netstat.c	/^fetch64(kstat_t *ksp, char *value64, uint64_t def)$/;"	f	file:
fetch6432	netstat.c	/^fetch6432(kstat_t *ksp, char *value64, char *value, uint64_t def)$/;"	f	file:
fetch_boot_time	netstat.c	/^fetch_boot_time(kstat_ctl_t *kc)$/;"	f	file:
fetch_nocanput	netstat.c	/^fetch_nocanput(kstat_t *ksp, uint32_t def)$/;"	f	file:
file_type	rsynclog.h	/^typedef enum file_type$/;"	g
file_type_t	rsynclog.h	/^} file_type_t;$/;"	t
filename	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^char *filename = NULL;              \/* file containing hosts to ping *\/$/;"	v
filename	rsynclog.h	/^    char filename[256];$/;"	m	struct:transfer_file
finish	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void finish()$/;"	f
freq	rservice.c	/^    frequency_t freq;$/;"	m	struct:rservice_s	file:
frequency	rservice.c	/^typedef struct frequency$/;"	s	file:
frequency_t	rservice.c	/^} frequency_t;$/;"	t	file:
g_network	netstat.c	/^static char *g_network[] = { "be", "bge", "ce", "ci", "dmfe", "e1000g", "el",$/;"	v	file:
generate_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int generate_flag = 0;              \/* flag for IP list generation *\/$/;"	v
getKStatNumber	test_kstat.c	/^long getKStatNumber(kstat_ctl_t *kernelDesc, char *moduleName, $/;"	f
getKStatNumber	tests/test_kstat.c	/^long getKStatNumber(kstat_ctl_t *kernelDesc, char *moduleName, $/;"	f
getKStatString	test_kstat.c	/^char *getKStatString(kstat_ctl_t *kernelDesc, char *moduleName, $/;"	f
getKStatString	tests/test_kstat.c	/^char *getKStatString(kstat_ctl_t *kernelDesc, char *moduleName, $/;"	f
get_bytesout	netstat.c	/^int get_bytesout(double bytesout[])$/;"	f
get_frequency_by_content	rservice.c	/^get_frequency_by_content(char *line, frequency_t *f)$/;"	f	file:
get_host_by_address	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^char *get_host_by_address( struct in_addr in )$/;"	f
get_interface_name	netstat.c	/^int get_interface_name(nicname *interface_list)$/;"	f
get_latest_data	netstat.c	/^get_latest_data(kstat_ctl_t *kc, nicdata l_data[])$/;"	f	file:
get_num_by_day	rservice.c	/^get_num_by_day(char *day_str)$/;"	f	file:
get_num_by_mon	rservice.c	/^get_num_by_mon(char *mon_str)$/;"	f	file:
get_outerrs	netstat.c	/^int get_outerrs(double outerrs[])$/;"	f
get_rservice_list	rservice.c	/^get_rservice_list(rservice_t *service_list)$/;"	f	file:
get_service_status	rservice.c	/^get_service_status(rservice_t *rs)$/;"	f
get_systime_slash	utils.c	/^get_systime_slash(char *tdate, char *ttime)$/;"	f
get_temp_filename	rsynclog.c	/^get_temp_filename(char *filename, char *temp_filename, char *last_line)$/;"	f
get_worked_time	rservice.c	/^get_worked_time(struct tm *last_time, frequency_t *freq, struct tm* worktime)$/;"	f	file:
handle_random_icmp	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int handle_random_icmp( FPING_ICMPHDR *p, int psize, FPING_SOCKADDR *addr )$/;"	f
host	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     char                 *host;              \/* text description of host *\/$/;"	m	struct:host_entry	file:
host_entry	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^typedef struct host_entry$/;"	s	file:
host_nr	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.h	/^    unsigned int    host_nr;$/;"	m	struct:seqmap_value
hour	rservice.c	/^    int hour;$/;"	m	struct:frequency	file:
human_readable_str	rconf.c	/^	const char *human_readable_str;$/;"	m	struct:rc_print_mode_str	file:
i	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  i;                  \/* index into array *\/$/;"	m	struct:host_entry	file:
icmp_type_str	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^char *icmp_type_str[19] =$/;"	v
icmp_unreach_str	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^char *icmp_unreach_str[16] =$/;"	v
ident	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int ident;                  \/* our pid *\/$/;"	v
in_cksum	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int in_cksum( unsigned short *p, int n )$/;"	f
instance_name	rservice.c	/^    char instance_name[50];$/;"	m	struct:rservice_s	file:
interval	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^unsigned int interval = DEFAULT_INTERVAL * 100;$/;"	v
is_target_alive	utils.c	/^is_target_alive(const char *ip)$/;"	f
last_line	rsynclog.h	/^    char last_line[100];$/;"	m	struct:transfer_file
last_report_time	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^struct timeval last_report_time;    \/* time last report was printed *\/$/;"	v
last_send_time	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     struct timeval       last_send_time;     \/* time of last packet sent *\/$/;"	m	struct:host_entry	file:
last_send_time	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^struct timeval last_send_time;      \/* time last ping was sent *\/$/;"	v
last_time	rservice.c	/^    struct tm last_time; $/;"	m	struct:rservice_s	file:
le	repmon.c	/^log_entity_t le;	\/* log entity *\/$/;"	v
le_act	rlog.h	/^	boolean_t	le_act;\/* indicate if there is active item *\/$/;"	m	struct:log_entity
le_actend	rlog.h	/^	int		le_actend;$/;"	m	struct:log_entity
le_actitem	rlog.h	/^	log_item_t	*le_actitem; \/* store active item *\/$/;"	m	struct:log_entity
le_actstart	rlog.h	/^	int		le_actstart;$/;"	m	struct:log_entity
le_fd	rlog.h	/^	int		le_fd;$/;"	m	struct:log_entity
le_fp	rlog.h	/^	FILE		*le_fp;$/;"	m	struct:log_entity
le_type	rlog.h	/^	log_type_t 	le_type;$/;"	m	struct:log_entity
li_content	rlog.h	/^	char li_content[LOG_CONTENT_LEN]; \/* log content *\/$/;"	m	struct:log_item
li_date	rlog.h	/^	char li_date[11];	\/* the format is mon\/date\/year *\/$/;"	m	struct:log_item
li_level_str	rlog.h	/^	char li_level_str[9];	\/* log level string *\/$/;"	m	struct:log_item
li_sername	rlog.h	/^	char li_sername[LOG_SERNAME_LEN]; \/* service name *\/$/;"	m	struct:log_item
li_time	rlog.h	/^	char li_time[9];	\/* the format is hou\/min\/sec *\/$/;"	m	struct:log_item
lockfd	repmon.c	/^int lockfd = 0;		\/* file descriptor of lockf *\/$/;"	v
log_close	rlog.c	/^log_close(log_entity_t *le)$/;"	f
log_create_item	rlog.c	/^log_create_item(log_entity_t *le, int level, const char *sername,$/;"	f
log_entity	rlog.h	/^typedef struct log_entity {$/;"	s
log_entity_t	rlog.h	/^} log_entity_t;$/;"	t
log_err	rservice.c	/^log_err(int level, char *msg)$/;"	f	file:
log_flush	rlog.c	/^log_flush(log_entity_t *le)$/;"	f
log_item	rlog.h	/^typedef struct log_item {$/;"	s
log_item_level	rlog.h	/^typedef enum log_item_level {$/;"	g
log_item_level_str	rlog.h	/^static const char * log_item_level_str[] = {$/;"	v
log_item_level_t	rlog.h	/^} log_item_level_t;$/;"	t
log_item_t	rlog.h	/^} log_item_t;$/;"	t
log_open	rlog.c	/^log_open(log_entity_t *le, const char *lpath)$/;"	f
log_type	rlog.h	/^typedef enum log_type {$/;"	g
log_type_t	rlog.h	/^} log_type_t;$/;"	t
logfp	repmon.c	/^FILE *logfp = 0;	\/* file descriptor of repmon log *\/$/;"	v
loop_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int elapsed_flag, version_flag, count_flag, loop_flag;$/;"	v
lose_factor	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int lose_factor;$/;"	v
main	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int main( int argc, char **argv )$/;"	f
main	repmon.c	/^main(int argc, char *argv[])$/;"	f
main	test.c	/^main(int argc, char *argv[])$/;"	f
main	test_kstat.c	/^main(int argc, char *argv[]) $/;"	f
main	tests/test_file.c	/^main(int argc, char *argv[])$/;"	f
main	tests/test_kstat.c	/^main(int argc, char *argv[]) $/;"	f
main	tests/test_obj.c	/^main(int argc, char *argv[])$/;"	f
main	tests/test_ping.c	/^main(int argc, char *argv[])$/;"	f
main	tests/test_time.c	/^main(int argc, char *argv[])$/;"	f
main_loop	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void main_loop()$/;"	f
max_hostname_len	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int max_hostname_len = 0;$/;"	v
max_reply	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  max_reply;          \/* longest response time *\/$/;"	m	struct:host_entry	file:
max_reply	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^long max_reply = 0;$/;"	v
max_reply_i	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  max_reply_i;        \/* longest response time *\/$/;"	m	struct:host_entry	file:
min	rservice.c	/^    int min;$/;"	m	struct:frequency	file:
min_reply	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  min_reply;          \/* shortest response time *\/$/;"	m	struct:host_entry	file:
min_reply	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^long min_reply = 0;$/;"	v
min_reply_i	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  min_reply_i;        \/* shortest response time *\/$/;"	m	struct:host_entry	file:
mon	rservice.c	/^    int mon;$/;"	m	struct:frequency	file:
multif_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int multif_flag;$/;"	v
name	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     char                 *name;              \/* name as given by user *\/$/;"	m	struct:host_entry	file:
name	netstat.h	/^    nicname name;           \/* name of interface *\/$/;"	m	struct:nicdata
name_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int per_recv_flag, report_all_rtts_flag, name_flag, addr_flag, backoff_flag;$/;"	v
nicdata	netstat.h	/^typedef struct nicdata {$/;"	s
nicdata	netstat.h	/^} nicdata;$/;"	t
nicname	netstat.h	/^typedef char nicname[NIC_NAME_MAX];$/;"	t
num_alive	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int num_alive = 0,                  \/* total number alive *\/$/;"	v
num_hosts	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int num_hosts;                      \/* total number of hosts *\/$/;"	v
num_jobs	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int num_jobs = 0;                   \/* number of hosts still to do *\/$/;"	v
num_noaddress	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^    num_noaddress = 0;              \/* total number of addresses not found *\/$/;"	v
num_othericmprcvd	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^    num_othericmprcvd = 0;          \/* total non-echo-reply ICMP received *\/$/;"	v
num_pingreceived	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^    num_pingreceived = 0,           \/* total pings received *\/$/;"	v
num_pingsent	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^    num_pingsent = 0,               \/* total pings sent *\/$/;"	v
num_recv	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  num_recv;           \/* number of pings received (duplicates ignored) *\/$/;"	m	struct:host_entry	file:
num_recv_i	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  num_recv_i;         \/* number of pings received *\/$/;"	m	struct:host_entry	file:
num_recv_total	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  num_recv_total;     \/* number of pings received, including duplicates *\/$/;"	m	struct:host_entry	file:
num_sent	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  num_sent;           \/* number of ping packets sent *\/$/;"	m	struct:host_entry	file:
num_sent_i	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  num_sent_i;         \/* number of ping packets sent *\/$/;"	m	struct:host_entry	file:
num_timeout	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int num_timeout = 0,                \/* number of times select timed out *\/$/;"	v
num_unreachable	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^    num_unreachable = 0,            \/* total number unreachable *\/$/;"	v
open_ping_socket	materials/ReplicationMonitor/rsync-monitor/src/rephb/socket.c	/^int open_ping_socket()$/;"	f
open_ping_socket_ipv4	materials/ReplicationMonitor/rsync-monitor/src/rephb/socket4.c	/^int open_ping_socket_ipv4()$/;"	f
open_ping_socket_ipv6	materials/ReplicationMonitor/rsync-monitor/src/rephb/socket6.c	/^int open_ping_socket_ipv6()$/;"	f
pad	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     char                 *pad;               \/* pad to align print names *\/$/;"	m	struct:host_entry	file:
parseable_str	rconf.c	/^	const char *parseable_str;$/;"	m	struct:rc_print_mode_str	file:
per_recv_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int per_recv_flag, report_all_rtts_flag, name_flag, addr_flag, backoff_flag;$/;"	v
perhost_interval	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^unsigned int perhost_interval = DEFAULT_PERHOST_INTERVAL * 100;$/;"	v
pid	rsynclog.h	/^    int pid;$/;"	m	struct:transfer_file
ping	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int ping(char *host)$/;"	f
ping_count	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.h	/^    unsigned int    ping_count;$/;"	m	struct:seqmap_value
ping_data_size	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^unsigned int ping_data_size = DEFAULT_PING_DATA_SIZE;$/;"	v
ping_pkt_size	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^unsigned int ping_pkt_size;$/;"	v
ping_ts	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.h	/^    struct timeval  ping_ts;$/;"	m	struct:seqmap_value
pname	utils.c	/^static const char *pname = ".\/";$/;"	v	file:
print_cmd	rconf.c	/^print_cmd(const repmonconf_t *rcp, FILE *fp)$/;"	f	file:
print_global_stats	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void print_global_stats( void )$/;"	f
print_interval	rconf.c	/^print_interval(const repmonconf_t *rcp, FILE *fp)$/;"	f	file:
print_logdir	rconf.c	/^print_logdir(const repmonconf_t *rcp, FILE *fp)$/;"	f	file:
print_per_system_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int randomly_lose_flag, sent_times_flag, trace_flag, print_per_system_flag;$/;"	v
print_per_system_splits	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void print_per_system_splits( void )$/;"	f
print_per_system_stats	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void print_per_system_stats( void )$/;"	f
print_rc	test.c	/^print_rc(repmonconf_t *rc)$/;"	f
print_targetip	rconf.c	/^print_targetip(const repmonconf_t *rcp, FILE *fp)$/;"	f	file:
print_warning	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void print_warning(char *format, ...) {$/;"	f
process_logfile	rsynclog.c	/^process_logfile(char *filename, transfer_file_t *file_list, char *last_line)$/;"	f
prog	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^char *prog;$/;"	v
quiet_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int verbose_flag, quiet_flag, stats_flag, unreachable_flag, alive_flag;$/;"	v
randomly_lose_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int randomly_lose_flag, sent_times_flag, trace_flag, print_per_system_flag;$/;"	v
rbytes	netstat.h	/^    uint64_t rbytes;        \/* total read bytes *\/$/;"	m	struct:nicdata
rc	repmon.c	/^repmonconf_t rc;	\/* current configuration *\/$/;"	v
rc_conf_fd	rconf.h	/^	int rc_conf_fd;			\/* File descriptor for config file *\/$/;"	m	struct:repmonconf
rc_conf_fp	rconf.h	/^	FILE *rc_conf_fp;		\/* File pointer for config file *\/$/;"	m	struct:repmonconf
rc_interval	rconf.h	/^	long rc_interval;		\/* Working interval *\/$/;"	m	struct:repmonconf
rc_logdir	rconf.h	/^	char rc_logdir[MAXPATHLEN];	\/* Saved log directory *\/$/;"	m	struct:repmonconf
rc_print_mode_str	rconf.c	/^typedef struct rc_print_mode_str {$/;"	s	file:
rc_print_mode_str_t	rconf.c	/^} rc_print_mode_str_t;$/;"	t	file:
rc_print_mode_strs	rconf.c	/^static const rc_print_mode_str_t rc_print_mode_strs[] = {$/;"	v	file:
rc_readonly	rconf.h	/^	boolean_t rc_readonly;		\/* Readonly config file *\/$/;"	m	struct:repmonconf
rc_targetcmd	rconf.h	/^	char rc_targetcmd[CMDNAMELEN];	\/* Monitoring target cmd *\/$/;"	m	struct:repmonconf
rc_targetip	rconf.h	/^	char rc_targetip[MAXPATHLEN];	\/* Monitoring target IP *\/$/;"	m	struct:repmonconf
rc_token	rconf.h	/^typedef struct rc_token {$/;"	s
rc_token_t	rconf.h	/^} rc_token_t;$/;"	t
rconf_close	rconf.c	/^rconf_close(repmonconf_t *rcp)$/;"	f
rconf_open	rconf.c	/^rconf_open(repmonconf_t *rcp, const char *cpath)$/;"	f
rconf_str2cmd	rconf.c	/^rconf_str2cmd(repmonconf_t *rcp, char *buf)$/;"	f
rconf_str2dir	rconf.c	/^rconf_str2dir(repmonconf_t *rcp, char *buf)$/;"	f
rconf_str2int	rconf.c	/^rconf_str2int(repmonconf_t *rcp, char *buf)$/;"	f
rconf_str2ip	rconf.c	/^rconf_str2ip(repmonconf_t *rcp, char *buf)$/;"	f
recvfrom_wto	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int recvfrom_wto( int s, char *buf, int len, FPING_SOCKADDR *saddr, long timo )$/;"	f
remove_job	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void remove_job( HOST_ENTRY *h )$/;"	f
repmon_watchdog	repmon.c	/^repmon_watchdog(repmonconf_t *rcp, log_entity_t *lep)$/;"	f
repmon_writelog	repmon.c	/^repmon_writelog(char *msg)$/;"	f
repmonconf	rconf.h	/^typedef struct repmonconf {$/;"	s
repmonconf_t	rconf.h	/^} repmonconf_t;$/;"	t
report_all_rtts_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int per_recv_flag, report_all_rtts_flag, name_flag, addr_flag, backoff_flag;$/;"	v
report_interval	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^unsigned int report_interval = 0;$/;"	v
resp_times	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  *resp_times;        \/* individual response times *\/$/;"	m	struct:host_entry	file:
retry	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^unsigned int retry = DEFAULT_RETRY;$/;"	v
rpackets	netstat.h	/^    uint64_t rpackets;      \/* total read packets *\/$/;"	m	struct:nicdata
rrlist	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^HOST_ENTRY *rrlist = NULL;  \/* linked list of hosts be pinged *\/$/;"	v
rservice_s	rservice.c	/^typedef struct rservice_s$/;"	s	file:
rservice_t	rservice.c	/^} rservice_t;$/;"	t	file:
running	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     unsigned char        running;            \/* unset when through sending *\/$/;"	m	struct:host_entry	file:
s	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int s;                      \/* socket *\/$/;"	v
saddr	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     FPING_SOCKADDR       saddr;              \/* internet address *\/$/;"	m	struct:host_entry	file:
sat	netstat.h	/^    uint64_t sat;           \/* saturation value *\/$/;"	m	struct:nicdata
send_ping	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int send_ping( int s, HOST_ENTRY *h )$/;"	f
sent_times	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  *sent_times;        \/* per-sent-ping timestamp *\/$/;"	m	struct:host_entry	file:
sent_times_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int randomly_lose_flag, sent_times_flag, trace_flag, print_per_system_flag;$/;"	v
seqmap_add	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.c	/^unsigned int seqmap_add(unsigned int host_nr, unsigned int ping_count, struct timeval *now)$/;"	f
seqmap_fetch	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.c	/^SEQMAP_VALUE *seqmap_fetch(unsigned int id, struct timeval *now)$/;"	f
seqmap_free_list	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.c	/^static SEQMAP_VALUE *seqmap_free_list;$/;"	v	file:
seqmap_init	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.c	/^void seqmap_init()$/;"	f
seqmap_map	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.c	/^static SEQMAP_VALUE *seqmap_map = NULL;$/;"	v	file:
seqmap_next_id	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.c	/^static unsigned int seqmap_next_id = 0;$/;"	v	file:
seqmap_value	materials/ReplicationMonitor/rsync-monitor/src/rephb/seqmap.h	/^typedef struct seqmap_value$/;"	s
signal_handler	repmon.c	/^signal_handler(int sig)$/;"	f
size	rsynclog.h	/^    int size;$/;"	m	struct:transfer_file
socket_set_src_addr	materials/ReplicationMonitor/rsync-monitor/src/rephb/socket.c	/^void socket_set_src_addr(int s, FPING_INADDR src_addr)$/;"	f
socket_set_src_addr_ipv4	materials/ReplicationMonitor/rsync-monitor/src/rephb/socket4.c	/^void socket_set_src_addr_ipv4(int s, FPING_INADDR src_addr)$/;"	f
socket_set_src_addr_ipv6	materials/ReplicationMonitor/rsync-monitor/src/rephb/socket6.c	/^void socket_set_src_addr_ipv6(int s, FPING_INADDR src_addr)$/;"	f
speed	netstat.h	/^    uint64_t speed;         \/* speed of interface *\/$/;"	m	struct:nicdata
sprint_tm	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^char * sprint_tm( int t )$/;"	f
src_addr	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^struct in6_addr src_addr;$/;"	v
src_addr	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^struct in_addr src_addr;$/;"	v
src_addr_present	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int src_addr_present = 0;$/;"	v
start_time	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^struct timeval start_time; $/;"	v
started_time	rservice.c	/^    time_t started_time;$/;"	m	struct:rservice_s	file:
stat	rservice.c	/^    stat_t stat;$/;"	m	struct:rservice_s	file:
stat_s	rservice.c	/^typedef enum stat_s$/;"	g	file:
stat_t	rservice.c	/^} stat_t;$/;"	t	file:
stats_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int verbose_flag, quiet_flag, stats_flag, unreachable_flag, alive_flag;$/;"	v
status	rservice.c	/^    status_t status;$/;"	m	struct:rservice_s	file:
status_s	rservice.c	/^typedef enum status_s$/;"	g	file:
status_t	rservice.c	/^} status_t;$/;"	t	file:
sum_replies	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^double sum_replies = 0;$/;"	v
t_type	rsynclog.h	/^    transfer_type_t t_type;$/;"	m	struct:transfer_file
table	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^HOST_ENTRY **table = NULL;  \/* array of pointers to items in the list *\/$/;"	v
terminated	repmon.c	/^int terminated = 0;	\/* used to terminate the repmon process *\/$/;"	v
terminating	repmon.c	/^terminating(void *arg)$/;"	f
test_get_systime_slash	test.c	/^test_get_systime_slash()$/;"	f
test_rconf	test.c	/^test_rconf()$/;"	f
test_rlog	test.c	/^test_rlog()$/;"	f
time	netstat.h	/^    time_t time;            \/* time of sample *\/$/;"	m	struct:nicdata
timeout	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  timeout;            \/* time to wait for response *\/$/;"	m	struct:host_entry	file:
timeout	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^unsigned int timeout = DEFAULT_TIMEOUT * 100; $/;"	v
timestamp_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int timestamp_flag = 0;$/;"	v
timeval_add	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void timeval_add(struct timeval *a, long t_10u)$/;"	f
timeval_diff	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^long timeval_diff( struct timeval *a, struct timeval *b )$/;"	f
tok_name	rconf.h	/^	const char *tok_name;$/;"	m	struct:rc_token
tok_parse	rconf.h	/^	int (*tok_parse)(repmonconf_t *, char *);$/;"	m	struct:rc_token
tok_print	rconf.h	/^	int (*tok_print)(const repmonconf_t *, FILE *);$/;"	m	struct:rc_token
tokens	rconf.c	/^static const rc_token_t tokens[] = {$/;"	v	file:
total_replies	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int total_replies = 0;$/;"	v
total_time	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  total_time;         \/* sum of response times *\/$/;"	m	struct:host_entry	file:
total_time_i	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     int                  total_time_i;       \/* sum of response times *\/$/;"	m	struct:host_entry	file:
trace_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int randomly_lose_flag, sent_times_flag, trace_flag, print_per_system_flag;$/;"	v
transfer_file	rsynclog.h	/^typedef struct transfer_file$/;"	s
transfer_file_t	rsynclog.h	/^} transfer_file_t;$/;"	t
transfer_type	rsynclog.h	/^typedef enum transfer_type$/;"	g
transfer_type_t	rsynclog.h	/^} transfer_type_t;$/;"	t
trials	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^unsigned int trials;$/;"	v
ttl	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^unsigned int ttl = 0;$/;"	v
tz	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^struct timezone tz;$/;"	v
u_sleep	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void u_sleep( int u_sec )$/;"	f
unreachable_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int verbose_flag, quiet_flag, stats_flag, unreachable_flag, alive_flag;$/;"	v
usage	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^void usage(int is_error)$/;"	f
valid_abspath	utils.c	/^valid_abspath(const char *p)$/;"	f
valid_cmd	utils.c	/^valid_cmd(const char *cmd)$/;"	f
valid_ipaddr	tests/test_ping.c	/^valid_ipaddr(const char* ip)$/;"	f
valid_ipaddr	utils.c	/^valid_ipaddr(const char *ip)$/;"	f
verbose_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int verbose_flag, quiet_flag, stats_flag, unreachable_flag, alive_flag;$/;"	v
version_flag	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int elapsed_flag, version_flag, count_flag, loop_flag;$/;"	v
wait_for_reply	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^int wait_for_reply(long wait_time)$/;"	f
waiting	materials/ReplicationMonitor/rsync-monitor/src/rephb/rephb.c	/^     unsigned char        waiting;            \/* waiting for response *\/$/;"	m	struct:host_entry	file:
warn	utils.c	/^warn(const char *format, ...)$/;"	f
wbytes	netstat.h	/^    uint64_t wbytes;        \/* total written bytes *\/$/;"	m	struct:nicdata
week	rservice.c	/^    int week;$/;"	m	struct:frequency	file:
wpackets	netstat.h	/^    uint64_t wpackets;      \/* total written packets *\/$/;"	m	struct:nicdata
